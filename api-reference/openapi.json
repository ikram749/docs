{
  "openapi": "3.1.0",
  "info": {
    "title": "SayabeliPay API",
    "description": "SayabeliPay payment gateway API. Supports FPX bank listing, payment initiation, transaction queries, refunds, and secure request signing via hash generation.",
    "version": "1.0.0",
    "license": {
      "name": "Proprietary"
    }
  },
  "servers": [
    {
      "url": "https://api.sayabelipay.com/api/sandbox",
      "description": "Sandbox Environment"
    },
    {
      "url": "https://api.sayabelipay.com/api/live",
      "description": "Production Environment"
    }
  ],
  "security": [
    {
      "basicAuth": []
    }
  ],
  "paths": {
    "/fpx_bank_list": {
      "post": {
        "description": "Retrieve FPX bank listing with their display name and online/offline status.",
        "responses": {
          "200": {
            "description": "List of banks and status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "banks": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "name": { "type": "string", "description": "Bank display name" },
                          "status": { "type": "string", "description": "Availability (online/offline)" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/payment": {
      "post": {
        "description": "Initiate a new payment transaction. Requires a SHA-256 hash for request integrity (see components.securitySchemes.hashSignature).",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              }
            }
          },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/transactions": {
      "get": {
        "description": "Retrieve a paginated list of transactions with optional date filters.",
        "parameters": [
          { "name": "date_start", "in": "query", "schema": { "type": "string", "format": "date" } },
          { "name": "date_end", "in": "query", "schema": { "type": "string", "format": "date" } },
          { "name": "per_page", "in": "query", "schema": { "type": "integer" } },
          { "name": "page", "in": "query", "schema": { "type": "integer" } }
        ],
        "responses": {
          "200": {
            "description": "Transaction list retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Transaction" }
                }
              }
            }
          },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/transactions/{transaction_id}": {
      "get": {
        "description": "Retrieve details of a specific transaction.",
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Transaction" }
              }
            }
          },
          "404": { "description": "Transaction not found" },
          "500": { "description": "Internal server error" }
        }
      }
    },
    "/refund": {
      "get": {
        "description": "Request a refund for a transaction by transaction_id.",
        "parameters": [
          {
            "name": "transaction_id",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Refund details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Refund" }
              }
            }
          },
          "404": { "description": "Transaction not found" },
          "500": { "description": "Internal server error" }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "PaymentRequest": {
        "type": "object",
        "required": [
          "order_no",
          "order_detail",
          "amount",
          "quantity",
          "customer_name",
          "customer_email",
          "customer_phone",
          "channel",
          "hash"
        ],
        "properties": {
          "order_no": { "type": "string", "description": "Unique order number from merchant" },
          "order_detail": { "type": "string", "description": "Product/service description (max 30 chars)" },
          "amount": { "type": "string", "example": "1000.00", "description": "Transaction amount" },
          "quantity": { "type": "integer", "description": "Quantity of items" },
          "customer_name": { "type": "string" },
          "customer_email": { "type": "string", "format": "email" },
          "customer_phone": { "type": "string" },
          "channel": { "type": "string", "enum": ["ONLINE_BANKING", "CC", "WALLET"] },
          "payment_code": { "type": "string", "description": "Bank/wallet code if applicable" },
          "hash": {
            "type": "string",
            "description": "SHA-256 hash of concatenated string: clientSecret + customer_name + customer_email + customer_phone + order_no + amount + order_detail + paymentCode"
          }
        }
      },
      "PaymentResponse": {
        "type": "object",
        "properties": {
          "transaction_id": { "type": "string" },
          "order_no": { "type": "string" },
          "product_description": { "type": "string" },
          "channel": { "type": "string" },
          "currency": { "type": "string", "example": "MYR" },
          "transaction_amount": { "type": "string" },
          "transaction_date": { "type": "string" },
          "name": { "type": "string" },
          "phone_number": { "type": "string" },
          "email_address": { "type": "string" },
          "status": { "type": "string", "enum": ["Success", "Failed", "Aborted"] },
          "merchant_id": { "type": "string" },
          "merchant_redirect_url": { "type": "string" }
        }
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "transaction_id": { "type": "string" },
          "order_no": { "type": "string" },
          "product_description": { "type": "string" },
          "name": { "type": "string" },
          "phone_number": { "type": "string" },
          "email_address": { "type": "string" },
          "payment_use": { "type": "string" },
          "transaction_amount": { "type": "string" },
          "transaction_date": { "type": "string" },
          "status": { "type": "string", "enum": ["Success", "Failed", "Aborted"] }
        }
      },
      "Refund": {
        "type": "object",
        "properties": {
          "transaction_id": { "type": "string" },
          "order_no": { "type": "string" },
          "bank_name": { "type": "string" },
          "status": { "type": "string" },
          "processed_at": { "type": "string" },
          "message": { "type": "string" }
        }
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic",
        "description": "Use your client_id as username and client_secret as password."
      },
      "hashSignature": {
        "type": "apiKey",
        "in": "header",
        "name": "hash",
        "description": "SHA-256 hash required for Payment API. Formula: clientSecret + customer_name + customer_email + customer_phone + order_no + amount + order_detail + (payment_code or channel)."
      }
    }
  }
}
